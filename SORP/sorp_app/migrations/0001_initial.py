# Generated by Django 2.0.6 on 2018-06-12 10:41

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DocumentInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jee_roll_no', models.BigIntegerField()),
                ('year_of_admission', models.IntegerField()),
                ('provisional_admission_letter', models.BooleanField(default=False)),
                ('jee_score_card', models.BooleanField(default=False)),
                ('jee_admit_card', models.BooleanField(default=False)),
                ('class_10_certificate', models.BooleanField(default=False)),
                ('class_12_marksheet', models.BooleanField(default=False)),
                ('character_certificate', models.BooleanField(default=False)),
                ('migration_certificate', models.BooleanField(default=False)),
                ('remaining_Institute_fee', models.BooleanField(default=False)),
                ('hostel_fee', models.BooleanField(default=False)),
                ('medical_fitness_certificate', models.BooleanField(default=False)),
                ('certificate_of_disability', models.BooleanField(default=False)),
                ('certificate_of_category', models.BooleanField(default=False)),
                ('undertaking', models.BooleanField(default=False)),
                ('affidavit_year_gap', models.BooleanField(default=False)),
                ('affidavit_anti_ragging', models.BooleanField(default=False)),
                ('parent_affidavit_anti_ragging', models.BooleanField(default=False)),
                ('fee_status_josaa', models.BooleanField(default=False)),
                ('fee_status_nit_Hamirpur', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='StudentBasicInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jee_roll_no', models.BigIntegerField()),
                ('year_of_admission', models.IntegerField()),
                ('student_name_eng', models.CharField(max_length=60)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'others')], max_length=1)),
                ('date_of_birth', models.DateField(max_length=8)),
                ('father_name', models.CharField(max_length=60)),
                ('mother_name', models.CharField(max_length=60)),
                ('jee_AI_rank', models.IntegerField()),
                ('jee_category_rank', models.IntegerField()),
                ('bonafide_state', models.CharField(max_length=30)),
                ('intermediate_pass_state', models.CharField(max_length=30)),
                ('intermediate_percentage', models.DecimalField(decimal_places=3, max_digits=5)),
                ('intermediate_school', models.CharField(max_length=100)),
                ('type_school', models.CharField(choices=[('govt', 'government_school'), ('private', 'private_school')], max_length=20)),
                ('year_12_pass', models.CharField(max_length=4)),
                ('board', models.CharField(max_length=15)),
                ('jee_score', models.IntegerField()),
                ('main_category', models.CharField(max_length=10)),
                ('admission_category', models.CharField(max_length=10)),
                ('aadhar_no', models.IntegerField(unique='True')),
                ('student_class', models.CharField(choices=[('b.tech', 'b.tech'), ('m.tech', 'm.tech'), ('dual_degree', 'dual_degree')], max_length=20)),
                ('branch', models.CharField(max_length=20)),
                ('religion', models.CharField(max_length=30)),
                ('hostel_req', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10)),
                ('region', models.CharField(choices=[('Rural', 'Rural'), ('Urban', 'Urban')], max_length=25)),
                ('nearest_railway_st', models.CharField(max_length=70)),
                ('correspondence_add', models.CharField(max_length=1000)),
                ('permanent_add', models.CharField(max_length=10)),
                ('contact_father', models.IntegerField()),
                ('contact_mother', models.IntegerField()),
                ('contact_candidate', models.IntegerField()),
                ('contact_other', models.IntegerField()),
                ('email', models.EmailField(default='xyz@nith.ac.in', max_length=254)),
                ('entry_no', models.IntegerField(default=None)),
                ('section', models.CharField(max_length=25)),
                ('subsection', models.CharField(max_length=25)),
                ('user_id', models.OneToOneField(default=0, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentFirstFeeStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fee_josaa_amount', models.IntegerField()),
                ('fee_josaa_date', models.DateField(default=None)),
                ('fee_NITH_amount', models.IntegerField()),
                ('fee_NIT_receipt_no', models.CharField(max_length=25)),
                ('fee_nith_date', models.DateField(default=None)),
                ('student_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sorp_app.StudentBasicInfo')),
            ],
        ),
        migrations.CreateModel(
            name='StudentMedicalInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jee_roll_no', models.BigIntegerField()),
                ('year_of_admission', models.IntegerField()),
                ('date_of_birth', models.DateField()),
                ('age', models.CharField(max_length=20)),
                ('sex', models.CharField(max_length=1)),
                ('identification_mark', models.CharField(max_length=40)),
                ('major_illness', models.CharField(max_length=40)),
                ('vision', models.CharField(max_length=3)),
                ('hearing', models.CharField(max_length=10)),
                ('height_in_cm', models.IntegerField()),
                ('weight_kg', models.IntegerField()),
                ('past_mental_illness', models.CharField(max_length=30)),
                ('past_epileptic_fit', models.CharField(max_length=30)),
                ('chest_inspiration_in_cm', models.IntegerField()),
                ('chest_expiration_in_cm', models.IntegerField()),
                ('vision_without_glass_rt_eye', models.CharField(max_length=3)),
                ('vision_without_glass_lt_eye', models.CharField(max_length=3)),
                ('clour_blindness', models.CharField(max_length=10)),
                ('abdomen_liver', models.CharField(max_length=30)),
                ('abdomen_spleen', models.CharField(max_length=30)),
                ('respiratory_system', models.CharField(max_length=30)),
                ('nervous_system', models.CharField(max_length=30)),
                ('blood_group', models.CharField(max_length=5)),
                ('heart_sound', models.CharField(max_length=30)),
                ('heart_murmur', models.CharField(max_length=30)),
                ('hernia', models.CharField(max_length=30)),
                ('hydrocele', models.CharField(max_length=30)),
                ('any_other_defect', models.CharField(max_length=30)),
                ('student_id', models.OneToOneField(default=0, on_delete=django.db.models.deletion.CASCADE, to='sorp_app.StudentBasicInfo')),
            ],
        ),
        migrations.AddField(
            model_name='documentinfo',
            name='studnet_id',
            field=models.OneToOneField(default=0, on_delete=django.db.models.deletion.CASCADE, to='sorp_app.StudentBasicInfo'),
        ),
    ]
